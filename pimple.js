// Generated by CoffeeScript 1.3.3
/*
  service container
*/

var NotACallbackError, Pimple,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Pimple = (function() {

  function Pimple(values) {
    var key, value, _i, _len;
    if (values == null) {
      values = {};
    }
    for (value = _i = 0, _len = values.length; _i < _len; value = ++_i) {
      key = values[value];
      this.set(key, value);
    }
  }

  Pimple.prototype.set = function(key, value) {
    var result,
      _this = this;
    result = null;
    if (this._isFunction(value)) {
      result = function() {
        return value(_this);
      };
    } else {
      result = value;
    }
    this._values[key] = result;
    this._defineGetter(key);
  };

  Pimple.prototype._defineGetter = function(key) {
    var _this = this;
    return Object.defineProperty(this, key, {
      get: function(x) {
        return _this.get(key);
      }
    });
  };

  Pimple.prototype._isFunction = function(value) {
    return typeof value === 'function' && value instanceof Function;
  };

  Pimple.prototype.get = function(key) {
    var value;
    value = this._values[key];
    if (this._isFunction(value)) {
      return value(this);
    } else {
      return value;
    }
  };

  Pimple.prototype.share = function(key, callback) {
    var _object,
      _this = this;
    _object = null;
    if (this._isFunction(callback)) {
      return this.set(key, function() {
        if (_object !== null) {
          return _object;
        } else {
          _object = callback(_this);
          return _object;
        }
      });
    } else {
      return this._throwNotCallbackError();
    }
  };

  Pimple.prototype.raw = function(key) {
    if (this._values.key != null) {
      return this['_values'][key];
    }
  };

  Pimple.prototype.protect = function(key, callback) {
    if (this._isFunction(callback)) {
      return this.set(key, function() {
        return callback;
      });
    } else {
      return this._throwNotCallbackError();
    }
  };

  Pimple.prototype._throwNotCallbackError = function() {
    throw new NotACallbackError();
  };

  return Pimple;

})();

NotACallbackError = (function(_super) {

  __extends(NotACallbackError, _super);

  function NotACallbackError() {
    var rest;
    rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    NotACallbackError.__super__.constructor.apply(this, rest);
    this.type = "NotACallbackError";
    ({
      toString: function() {
        return "NotACallbackError";
      }
    });
  }

  return NotACallbackError;

})(Error);
